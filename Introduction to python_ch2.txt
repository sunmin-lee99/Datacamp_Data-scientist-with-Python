[Introduction to Python]

2. Python Lists

<Python List>
: 많은 양의 데이터를 처리하고 싶을 때 일일히 변수를 정하면 너무 번거롭고 복잡해짐
-> python list '[]' 대괄호를 이용하여 변수를 하나로 묶으면 됨
ex. fam에 1,2,3,4를 저장하고 싶은 경우
fam1 = 1
fam2 = 2
fam3 = 3
fam4 = 4
# 이렇게 하면 데이터 과학자로써 많은 양의 데이터를 다뤄야하는데 그럼 변수값을 끝없이 설정하고 일일히 저장해야됨

fam = [1, 2, 3, 4]
# 이렇게 대괄호를 이용하여 하나로 저장할 수 있음
fam

[1, 2, 3, 4] # 출력값은 대괄호를 포함한 안에 숫자들로 나오게됨


<List, 목록>
: 실수열, 문자열처럼 목록열 (대괄호로 이루어져있음)
: type(fam) -> list # 출력값
: 하위 집합을 구성하고 조정하기위한 여러 도구를 호스팅함

# 목록안에 목록을 넣을 수 있음
ex. 
fam = [['lisa', 4], ['jake', 2]] # 이렇게 문자열과 숫자 섞어서 목록 만들기 가능

[['lisa', 4], ['jake', 2]]

type(fam)

list


<Learn from Exercise>
# 목록을 변수로 정렬하면 결과값은 변수에 지정된 값으로 나옴

# "print out" the type of x
ex.
type(x) 

list # 이렇게 코드를 실행해도 list 유형인게 나옴

print(type(x))

<class 'list'> # 하지만 문제 자체가 print out 하라고 되어있으므로 꼭 print()를 사용한 후 출력값이 <class''> 형태로 나오게 해야함


<Subsetting Lists>
: 만든 목록의 정보에 액세스하는 방법
-> 파이썬은 이를 위해 index를 사용함
: 여러개의 변수들이 목록에 저장되어있으므로 그 중에 하나만 꼭 집어서 빼올때 index를 이용하여 빼오는 것


<Index>
: 순서대로 숫자를 매기는 것
ex.
fam = [a, b, c, d]
          0  1  2  3

fam[3]

d # 왜냐하면 양수(왼쪽 끝 기준) 순서대로 세번째

fam[-1] # -1 : nagative index

d # 왜냐하면 음수(오른쪽 끝 기준) 순서대로 첫번째
  # 음수 방법은 목록의 끝에 있는 일부 요소를 가져올때 유용

# 주의해야할 것
: 숫자를 매길때는 '0부터' 시작함

<List slicing>
: 목록에서 여러 요소를 선택하여 새 목록을 만드는 것
-> 콜론 ':'을 이용하여 범위 지정
# [start : end]
start : inclusive (포함)
end : exclusive (제외) 

ex. 
fam = [a, b, c, d, e, f]
          0  1  2 3  4 5
fam[3:5]

[d, f] # 3인 d는 포함, 5인 f는 제외

fam[ :4] # 0에서 시작함을 표현하고 싶을때는 앞을 안쓰면 됨

[a, b, c, d]

fam[3: ] # 마지막 모든 요소까지 포함하고 싶을때는 뒤를 안쓰면 됨

[d, e, f] # 마지막 요소까지 제외없이 모두 포함되어 있음


<Learn from Exercise>
# second element = index 1 (0부터 시작하기 때문에)

# 목록에서 필요한 요소들을 index를 이용하여 추출한 후 덧셈, 뺄셈, 곱셈, 나눗셈 등등 연산을 할 수 있음

# 기본 괄호는 (), 대괄호는 list 작성할때만 쓰임

# 일부요소를 빼서 새로운 변수에 저장하기 위해선 항상 어디서 목록을 빼왔는지 입력할것
ex. areas에서 목록을 빼와서 x에 저장하는 경우
x = area[3:5] # [3:5]만 적으면 안됨!

# 처음부터 마지막 요소까지 포함하는 방법 : '[ : ]' 사용

# list안에 list가 있는 경우 index
ex.
x = [[a, b], [c, d], ["e", "f"]]
x[2][0] # 두번째 list니까 ["e", "f"]에서 0번째 "e" 출력

'e'

x[1][:1] # 첫번째 list에서 0번째까지

c


<List Manipulation>
: 목록의 요소를 변경하거나 목록에 요소를 추가 및 제거하는 방법

- Changing list elements (목록의 요소 변경)
: 대괄호와 index를 이용하여 바꿀 목록을 빼고 변수를 다시 저장해넣으면 됨
ex. 3을 4로 바꿔보자
x = ["a", 1, "b", 2, "c", 3]
x[5] = 4
print(x)

["a", 1, "b", 2, "c", 4] # index 5 부분이 4로 바껴서 업데이트 되어있음

# 전체 목록 조각들을 한번에 변경할 수도 있음
ex. 
x = ["a", 1, "b", 2, "c", 3]
x[0:2] = ["z", 100]
print(x)

["z", 100, "b", 2, "c", 4] # 두 부분이 한꺼번에 바껴있음

- Adding and removing elements(목록에서의 덧셈, 뺄셈 연산이 또 다름)
: 두 개의 목록에 더하기 기호를 사용하면 해당 콘텐츠를 목록 맨 뒤에 붙임
ex. 
x = ["a", 1, "b", 2, "c", 3]
x_ext = x + ["d", 4]
print(x_ext)

["a", 1, "b", 2, "c", 3, "d", 4] # 맨뒤에 붙어있는 것을 확인

: 목록에 del(x[index])를 이용하면 해당 콘텐츠가 사라짐
ex. 
x = ["a", 1, "b", 2, "c", 3]
del(x[2])
print(x)

["a", 1, 2, "c", 3] # 두번째 index "b"가 사라져있음

# 주의해야할 점
: list x를 만들면 이것은 컴퓨터 메모리안에 하나의 목록을 만들고 메모리를 차지하고 있음
-> 여기서 x = y를 하면 이 list y는 x가 만든 목록 그 자체에 y라는 이름이 하나 더 붙은 꼴임
-> 따라서, x나 y에 변경사항이 있으면 '둘 다' 변하게 됨
: list y를 새로 만들고 싶다면, list x와 다른 하나의 목록을 메모리에 넣어야됨
-> 방법 : y = list(x) 또는 y = x[:]
-> list x, list y가 따로따로 만들어짐
-> 따라서, x나 y에 변경사항이 있을 경우 '각자' 변하게 됨 (서로 영향받지 않음)


<Learn from Exercise>
# ; 을 이용하면 같은 line에 있게됨

# enter키를 이용하면 다른 line에 있게됨

